openapi: 3.0.0
info:
  title: Notifications APIs
  version: '1.21.0'
  description: Notifications APIs
#
# --------------------------------------------------------------------------------
#
paths:
  #
  # --------------------------------------------------------------------------------
  # RESTful style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Get a summary of all communications sent for a specified application
  # --------------------------------------------------------------------------------
  '/eros/{eroId}/communications/applications/{applicationId}':
    parameters:
      - name: eroId
        description: The ID of the Electoral Registration Office responsible for the application.
        schema:
          type: string
        in: path
        required: true
      - name: applicationId
        description: The identifier of the application to retrieve the communications history.
        schema:
          type: string
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Application - Communications History
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns the communication history for an application
      description: Returns the communication history for an application, sorted by the communication sent date in descending order (most recent first).
      tags:
        - Application - Communications History
      responses:
        '200':
          $ref: '#/components/responses/CommunicationsHistory'
      operationId: get-communication-history-by-application-id
      parameters:
        - name: sourceType
          description: The source type of the applications to retrieve communications history for, default if not supplied is to use voter-card
          schema:
            $ref: '#/components/schemas/SourceType'
          example: voter-card
          in: query
          required: false
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/eros/{eroId}/communications/applications/{applicationId}'
        requestParameters:
          integration.request.path.eroId: method.request.path.eroId
          integration.request.path.applicationId: method.request.path.applicationId
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET

  #
  # Get the subject and body of a specified notification
  # --------------------------------------------------------------------------------
  '/eros/{eroId}/communications/applications/{applicationId}/{communicationId}':
    parameters:
      - name: eroId
        description: The ID of the Electoral Registration Office responsible for the application.
        schema:
          type: string
        in: path
        required: true
      - name: applicationId
        description: The identifier of the application to retrieve the communications history.
        schema:
          type: string
        in: path
        required: true
      - name: communicationId
        description: The identifier of the communication to retrieve.
        schema:
          type: string
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Application - Communication
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns the subject and body of a communication
      description: Returns the subject and body of the specified communication
      tags:
        - Application - Communication
      responses:
        '200':
          $ref: '#/components/responses/SentCommunication'
      operationId: get-communication-by-id
      parameters:
        - name: sourceType
          description: The source type of the applications to retrieve communication for.
          schema:
            $ref: '#/components/schemas/SourceType'
          example: voter-card
          in: query
          required: true
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/eros/{eroId}/communications/applications/{applicationId}/{communicationId}'
        requestParameters:
          integration.request.path.eroId: method.request.path.eroId
          integration.request.path.applicationId: method.request.path.applicationId
          integration.request.path.communicationId: method.request.path.communicationId
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET

  #
  # Anonymous Elector Document - Communications History
  # ------------------------------------

  '/eros/{eroId}/communications/anonymous-applications/{applicationId}':
    parameters:
      - name: eroId
        description: The ID of the Electoral Registration Office responsible for the Application.
        schema:
          type: string
        in: path
        required: true
      - name: applicationId
        description: The identifier of the Anonymous Application to retrieve the communications history.
        schema:
          type: string
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Anonymous Elector Document - Communications History
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Create an offline communication confirmation for Anonymous Elector document applications
      description: |
        Allows the ERO user to confirm they have contacted the anonymous elector "offline" 
        (for example by email or post) after they have rejected a photo, document or the application itself. 
        A new record of the confirmation is created each time.
      operationId: create-offline-communication-confirmation
      tags:
        - Anonymous Elector Document - Communications History
      requestBody:
        $ref: '#/components/requestBodies/CreateOfflineCommunicationConfirmation'
      responses:
        '204':
          description: The offline communication confirmation was successfully processed
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/eros/{eroId}/communications/anonymous-applications/{applicationId}'
        requestParameters:
          integration.request.path.eroId: method.request.path.eroId
          integration.request.path.applicationId: method.request.path.applicationId
          integration.request.header.x-request-id: context.requestId
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST
    get:
      summary: Returns the offline communication confirmation history for an Anonymous Elector Document application
      description: |
        Returns the offline communication confirmation history for an Anonymous Elector Document application,
        sorted by the most recently submitted first. Multiple entries can be returned with the same reason and/or channel.
      tags:
        - Anonymous Elector Document - Communications History
      responses:
        '200':
          $ref: '#/components/responses/CommunicationConfirmationHistory'
      operationId: get-offline-communication-confirmation-history-by-application-id
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/eros/{eroId}/communications/anonymous-applications/{applicationId}'
        requestParameters:
          integration.request.path.eroId: method.request.path.eroId
          integration.request.path.applicationId: method.request.path.applicationId
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET

  #
  # Communications Statistics VAC - anonymised statistics about communications for a VAC application
  # --------------------------------------------------------------------------------
  '/communications/statistics/vac':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Statistics
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns anonymised statistics about communications for a VAC application
      description: Returns anonymised statistics about communications for a VAC application
      tags:
        - Statistics
      parameters:
        - name: applicationId
          description: An identifier of an application
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/CommunicationsStatisticsVAC'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
      operationId: get-notification-statistics-by-application-id-vac
      security:
        - awsIamAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/voter-authority-certificates/communications/statistics/vac'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET

  #
  # Communications Statistics OAVA - anonymised statistics about communications for an OAVA application
  # --------------------------------------------------------------------------------
  '/communications/statistics/oava/{oavaService}':
    parameters:
      - name: oavaService
        description: The OAVA service of the application (postal or proxy).
        schema:
          type: string
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Statistics
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns anonymised statistics about communications for an OAVA application
      description: Returns anonymised statistics about communications for an OAVA application
      tags:
        - Statistics
      parameters:
        - name: applicationId
          description: An identifier of an application
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/CommunicationsStatisticsOAVA'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
      operationId: get-notification-statistics-by-application-id-oava
      security:
        - awsIamAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/communications/statistics/oava/{oavaService}'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET

  #
  # Communication Statistics - anonymised statistics about communications for an application
  # --------------------------------------------------------------------------------
  '/communications/statistics/{service}/{applicationId}':
    parameters:
      - name: service
        description: The service of the application.
        schema:
          type: string
          enum:
            - postal
            - proxy
            - vac
            - overseas
        in: path
        required: true
      - name: applicationId
        description:  An identifier of an application.
        schema:
          type: string
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Statistics
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns anonymised statistics about communications for an application
      description: Returns anonymised statistics about communications for an application
      tags:
        - Statistics
      responses:
        '200':
          $ref: '#/components/responses/CommunicationsStatistics'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
      operationId: get-notification-statistics-by-application-id
      security:
        - awsIamAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/communications/statistics/{service}/{applicationId}'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET


  #
  # --------------------------------------------------------------------------------
  # RPC style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Generate Photo Resubmission Template Preview
  # --------------------------------------------------------------------------------

  '/templates/photo-resubmission/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Photo Resubmission Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for a photo resubmission template type and personalisation data
      description: Generates a text and html preview for a photo resubmission template type and personalisation data
      operationId: generate-photo-resubmission-template-preview
      tags:
        - Generate Photo Resubmission Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GeneratePhotoResubmissionTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/photo-resubmission/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate ID Document Resubmission Template Preview
  # --------------------------------------------------------------------------------

  '/templates/id-document-resubmission/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate ID Document Resubmission Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for an identity document resubmission template type and personalisation data
      description: Generates a text and html preview for an identity document resubmission template type and personalisation data
      operationId: generate-id-document-resubmission-template-preview
      tags:
        - Generate ID Document Resubmission Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateIdDocumentResubmissionTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/id-document-resubmission/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate ID Document Required Template Preview
  # --------------------------------------------------------------------------------

  '/templates/id-document-required/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate ID Document Required Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for an ID document required template type and personalisation data
      description: Generates a text and html preview for an ID document required template type and personalisation data
      operationId: generate-id-document-required-template-preview
      tags:
        - Generate ID Document Required Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateIdDocumentRequiredTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/id-document-required/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Application Rejected Template Preview
  # --------------------------------------------------------------------------------

  '/templates/application-rejected/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Application Rejected Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for an application rejected template type and personalisation data
      description: Generates a text preview for an application rejected template type and personalisation data
      operationId: generate-application-rejected-template-preview
      tags:
        - Generate Application Rejected Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateApplicationRejectedTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/application-rejected/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Application Approval Template Preview
  # --------------------------------------------------------------------------------

  '/templates/application-approved/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Application Approved Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for an application approved template type and personalisation data
      description: Generates a text preview for an application approved template type and personalisation data
      operationId: generate-application-approved-template-preview
      tags:
        - Generate Application Approved Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateApplicationApprovedTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/application-approved/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST


  #
  # Generate Rejected Document Template Preview
  # --------------------------------------------------------------------------------

  '/templates/rejected-document/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Rejected Document Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for a rejected document template type and personalisation data
      description: Generates a text preview for a rejected document template type and personalisation data
      operationId: generate-rejected-document-template-preview
      tags:
        - Generate Rejected Document Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateRejectedDocumentTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/rejected-document/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Rejected Signature Template Preview
  # --------------------------------------------------------------------------------

  '/templates/rejected-signature/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Rejected Signature Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for a rejected signature template type and personalisation data
      description: Generates a text preview for a rejected signature template type and personalisation data
      operationId: generate-rejected-signature-template-preview
      tags:
        - Generate Rejected Signature Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateRejectedSignatureTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/rejected-signature/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Requested Signature Template Preview
  # --------------------------------------------------------------------------------

  '/templates/requested-signature/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Requested Signature Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for a requested signature template type and personalisation data
      description: Generates a text preview for a requested signature template type and personalisation data
      operationId: generate-requested-signature-template-preview
      tags:
        - Generate Requested Signature Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateRequestedSignatureTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/requested-signature/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Nino Not matched Template Preview
  # --------------------------------------------------------------------------------

  '/templates/nino-not-matched/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Nino Not matched Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for nino not matched template type and personalisation data
      description: Generates a text preview for nino not matched template type and personalisation data
      operationId: generate-nino-not-matched-template-preview
      tags:
        - Generate Nino not matched Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateNinoNotMatchedTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/nino-not-matched/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate bespoke comm Template Preview
  # --------------------------------------------------------------------------------

  '/templates/bespoke-comm/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate bespoke comm matched Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for bespoke comm template type and personalisation data
      description: Generates a text preview for bespoke comm template type and personalisation data
      operationId: generate-bespoke-comm-template-preview
      tags:
        - Generate Bespoke Comm Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateBespokeCommTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/bespoke-comm/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Not Registered To Vote Template Preview
  # --------------------------------------------------------------------------------

  '/templates/not-registered-to-vote/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Not Registered To Vote Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for not registered to vote template type and personalisation data
      description: Generates a text preview for not registered to vote template type and personalisation data
      operationId: generate-not-registered-to-vote-template-preview
      tags:
        - Generate Not Registered To Vote Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateNotRegisteredToVoteTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/not-registered-to-vote/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Rejected Overseas Document Preview
  # --------------------------------------------------------------------------------

  '/templates/rejected-overseas-document/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Rejected Overseas Document Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for a rejected overseas document template type
      description: Generates a text and html preview for a rejected overseas document template type
      operationId: generate-rejected-overseas-document-template-preview
      tags:
        - Generate Rejected Overseas Document Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateRejectedOverseasDocumentTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/rejected-overseas-document/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Required Overseas Document Preview
  # --------------------------------------------------------------------------------

  '/templates/required-overseas-document/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Required Overseas Document Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for a required overseas document template type
      description: Generates a text and html preview for a required overseas document template type
      operationId: generate-required-overseas-document-template-preview
      tags:
        - Generate Required Overseas Document Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateRequiredOverseasDocumentTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/required-overseas-document/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Signature Resubmission Template Preview
  # --------------------------------------------------------------------------------

  '/templates/signature-resubmission/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Signature Resubmission Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for a signature resubmission template type and personalisation data
      description: Generates a text preview for a signature resubmission template type and personalisation data
      operationId: generate-signature-resubmission-template-preview
      tags:
        - Generate Signature Resubmission Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateSignatureResubmissionTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          $ref: '#/components/responses/400ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/signature-resubmission/preview'
        requestParameters:
          integration.request.header.x-request-id: context.requestId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

components:
  #
  # Schema and Enum Definitions
  # --------------------------------------------------------------------------------
  schemas:
    ErrorResponse:
      title: ErrorResponse
      description: |
        A generic response body object describing errors in a web request, and can be used to communicate several
        different types of error condition such as (but not limited to) `400 BAD REQUEST`, `409 CONFLICT` etc.
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2022-09-28T18:01:42.105Z'
        status:
          type: integer
          example: 400
        error:
          type: string
          example: 'Bad Request'
        message:
          type: string
          example: 'Validation failed for object=applicationRequest. Error count: 14'
        validationErrors:
          description: Validation errors are only present if the error being described is a `400 BAD REQUEST`.
          type: array
          items:
            type: string
          example: 'Error on field applicant.nino: rejected value [aaaaaaaaaaa], must match ^.{1,10}$'
      required:
        - timestamp
        - status
        - error
        - message
    TemplateType:
      title: TemplateType
      description: An enum containing types of notification templates
      type: string
      enum:
        - application-received
        - application-approved
        - application-rejected
        - photo-resubmission
        - id-document-resubmission
        - id-document-required
        - rejected-document
        - rejected-signature
        - requested-signature
        - nino-not-matched
        - rejected-parent-guardian
        - rejected-previous-address
        - previous-address-document-required
        - parent-guardian-proof-required
        - bespoke-comm
        - not-registered-to-vote
        - signature-resubmission
    Language:
      title: Language
      description: The language to view the template
      type: string
      enum:
        - cy
        - en
      default: en
    CommunicationChannel:
      title: CommunicationChannel
      description: The channel to send communication to an applicant
      type: string
      enum:
        - email
        - letter
    SourceType:
      title: SourceType
      description: The source type of the application
      type: string
      enum:
        - voter-card
        - postal
        - proxy
        - overseas
    ApplicationType:
      title: ApplicationType
      description: The application type of the application
      type: string
      enum:
        - vac
        - postal
        - proxy
        - overseas
    DocumentCategory:
      title: DocumentCategory
      description: The category of the document
      type: string
      enum:
        - identity
        - parent-guardian
        - previous-address
    GenerateIdDocumentResubmissionTemplatePreviewRequest:
      title: GenerateIdDocumentResubmissionTemplatePreviewRequest
      description: An object containing request attributes required for generating the identity document resubmission template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/IdDocumentPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GeneratePhotoResubmissionTemplatePreviewRequest:
      title: GeneratePhotoResubmissionTemplatePreviewRequest
      description: An object containing request attributes required for generating the photo resubmission template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/PhotoPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateIdDocumentRequiredTemplatePreviewRequest:
      title: GenerateIdDocumentRequiredTemplatePreviewRequest
      description: An object containing request attributes required for generating the ID document required template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/IdDocumentRequiredPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateTemplatePreviewRequest:
      title: GenerateTemplatePreviewRequest
      description: An object containing template type and map of personalisation data for the template
      type: object
      properties:
        personalisation:
          type: object
          additionalProperties:
            type: string
          description: Map of personalisation data
          example:
            name: Fred
            surname: Blogs
      required:
        - personalisation
        - sourceType
    GenerateTemplatePreviewResponse:
      title: GenerateTemplatePreviewResponse
      type: object
      description: Response containing the result of template preview in text format and if supported also in html format
      properties:
        text:
          type: string
          description: Text preview of the template with personalisation data
          example: Hi Fred Blogs,
        subject:
          type: string
          description: Preview of the subject with personalisation data, if the template supports subject field
          example: Fred Blogs photo resubmission
        html:
          type: string
          description: Html preview of the template with personalisation data, if the template supports html format
          example: <p>Hi Fred Blogs,</p>
      required:
        - text
    GenerateApplicationRejectedTemplatePreviewRequest:
      title: GenerateApplicationRejectedTemplatePreviewRequest
      description: An object containing request attributes required for generating the application rejected template preview
      type: object
      properties:
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/ApplicationRejectedPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - personalisation
        - sourceType
    GenerateApplicationApprovedTemplatePreviewRequest:
      title: GenerateApplicationApprovedTemplatePreviewRequest
      description: An object containing request attributes required for generating the application approved template preview
      type: object
      properties:
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/BasePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - language
        - personalisation
        - sourceType
    GenerateApplicationReceivedTemplatePreviewRequest:
      title: GenerateApplicationReceivedTemplatePreviewRequest
      description: An object containing request attributes required for generating the application received template preview
      type: object
      properties:
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/BasePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - language
        - personalisation
        - sourceType
    GenerateRejectedDocumentTemplatePreviewRequest:
      title: GenerateRejectedDocumentTemplatePreviewRequest
      description: An object containing request attributes required for generating the rejected document template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/RejectedDocumentPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateRejectedOverseasDocumentTemplatePreviewRequest:
      title: GenerateRejectedOverseasDocumentTemplatePreviewRequest
      description: An object containing request attributes required for generating the relevant rejected document template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/RejectedOverseasDocumentPersonalisation'
        documentCategory:
          $ref: '#/components/schemas/DocumentCategory'
      required:
        - channel
        - personalisation
        - sourceType
        - documentCategory
    GenerateRequiredOverseasDocumentTemplatePreviewRequest:
      title: GenerateRequiredOverseasDocumentTemplatePreviewRequest
      description: An object containing request attributes required for generating the relevant required document template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/RequiredOverseasDocumentPersonalisation'
        documentCategory:
          $ref: '#/components/schemas/DocumentCategory'
      required:
        - channel
        - personalisation
        - sourceType
        - documentCategory
    IdDocumentPersonalisation:
      title: IdDocumentPersonalisation
      type: object
      description: Personalisation details for an identity document resubmission template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        rejectedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/RejectedDocument'
        idDocumentRequestFreeText:
          type: string
          description: A free text field containing details as to what the applicant needs to do. Not related to any specific rejection reason.
          example: Please provide new identity documents within the next 10 days in order to meet the application deadline before the next election.
      required:
        - idDocumentRequestFreeText
    PhotoPersonalisation:
      title: PhotoPersonalisation
      type: object
      description: Personalisation details for photo resubmission template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        photoRejectionReasons:
          type: array
          items:
            $ref: '#/components/schemas/PhotoRejectionReason'
          description: A list of reasons why the applicant photo has been rejected. A mandatory field, but can be empty.
        photoRejectionNotes:
          type: string
          description: Optional free text giving details as to why the photo was rejected
          example: Please ensure your hair is not covering any part of your face.
        photoRequestFreeText:
          type: string
          description: A free text with details as to what the applicant needs to do. Not related to any specific rejection reason.
          example: Please provide a new photo within the next 10 days in order to meet the application deadline before the next election.
        uploadPhotoLink:
          type: string
          description: The URL link to upload a new image
          example: 'http://localhost:8080/eros/city-council/applications/507f1f77bcf86cd799439011/photos/398c1be2-7950-48a2-aca8-14cb9276a673'
      required:
        - photoRejectionReasons
        - photoRequestFreeText
        - uploadPhotoLink

    PhotoRejectionReason:
      title: PhotoRejectionReason
      description: Enum of reasons for rejecting a photo.
      type: string
      enum:
        - not-facing-forwards-or-looking-at-the-camera
        - photo-not-in-colour-distorted-or-too-dark
        - other-objects-or-people-in-photo
        - not-a-plain-facial-expression
        - eyes-not-open-or-visible-or-hair-in-front-face
        - wearing-sunglasses-or-tinted-glasses
        - photo-has-head-covering-aside-from-religious-or-medical
        - photo-has-red-eye-glare-or-shadows-over-face
        - other

    IdDocumentRequiredPersonalisation:
      title: IdDocumentRequiredPersonalisation
      type: object
      description: Personalisation details for an ID document required template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        idDocumentRequiredFreeText:
          type: string
          description: Free text message of why an identity document is requested
          example: Please provide a valid identity document
      required:
        - idDocumentRequiredFreeText
    RejectedDocumentPersonalisation:
      title: RejectedDocumentPersonalisation
      type: object
      description: Personalisation details for a rejected document template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/RejectedDocument'
          minItems: 1
        rejectedDocumentFreeText:
          type: string
          description: Free text message to provided further information regarding the document rejection
          example: Please provide a valid document within 28 days
      required:
        - documents
    RejectedOverseasDocumentPersonalisation:
      title: RejectedOverseasDocumentPersonalisation
      type: object
      description: Personalisation details for rejected overseas document template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/RejectedDocument'
          minItems: 1
        rejectedDocumentFreeText:
          type: string
          description: Free text message to provided further information regarding the document rejection
          example: Please provide a valid document within 28 days
      required:
        - documents
    RequiredOverseasDocumentPersonalisation:
      title: RequiredOverseasDocumentPersonalisation
      type: object
      description: Personalisation details for required overseas document template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        requiredDocumentFreeText:
          type: string
          description: Free text message to provided further information regarding the required document
          example: Please provide a valid document within 28 days
    BasePersonalisation:
      title: BasePersonalisation
      type: object
      description: Base/Common personalisation details required for a template
      properties:
        applicationReference:
          type: string
          description: The reference number of the Voter Card Application
          example: A3JSZC4CRH
        firstName:
          type: string
          pattern: '.*[a-zA-Z]+.*'
          minLength: 1
          maxLength: 255
          description: The applicant's first name
          example: Fred
        eroContactDetails:
          $ref: '#/components/schemas/ContactDetails'
      required:
        - applicationReference
        - firstName
        - eroContactDetails
    ApplicationRejectedPersonalisation:
      title: ApplicationRejectedPersonalisation
      type: object
      description: Personalisation details for an application rejected template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        rejectionReasonList:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRejectionReason'
          example: 'Application is incomplete'
        rejectionReasonMessage:
          type: string
          example: 'Applicant address information is incomplete'
      required:
        - rejectionReasonList
    ContactDetails:
      title: ContactDetails
      type: object
      description: Contact details for an ERO
      properties:
        localAuthorityName:
          description: Name of the Local Authority
          type: string
          example: City of Sunderland
        website:
          description: ERO website address
          type: string
          example: "https://ero-address.com"
        phone:
          description: ERO phone number
          type: string
          example: 01234 567890
        email:
          description: Email address for an ERO
          type: string
          example: fred.blogs@some-domain.co.uk
        address:
          $ref: '#/components/schemas/Address'
      required:
        - localAuthorityName
        - website
        - phone
        - email
        - address
    Address:
      title: Address
      description: Address format used throughout gov.uk voter services for an ERO.
      type: object
      x-examples:
        Minimum data:
          street: Street 1
          postcode: PC1 2FB
        Normal Address:
          street: East Lodge
          property: Balruddery
          locality: Invergowrie
          town: Dundee
          area: Angus
          postcode: DD25LF
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 255
          example: Charles Lane
        property:
          type: string
          maxLength: 255
        locality:
          type: string
          maxLength: 255
        town:
          type: string
          maxLength: 255
          example: London
        area:
          type: string
          maxLength: 255
        postcode:
          type: string
          minLength: 1
          maxLength: 10
          example: PE3 6SB
      required:
        - street
        - postcode
    CommunicationsHistoryResponse:
      title: CommunicationsHistoryResponse
      description: Response containing the communications history for an application
      type: object
      properties:
        communications:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationsSummary'
      required:
        - communications
    SentCommunicationResponse:
      title: SentCommunicationResponse
      description: Response containing the subject and body of a sent communication
      type: object
      properties:
        subject:
          type: string
        body:
          type: string
      required:
        - subject
        - body
    CommunicationsSummary:
      title: CommunicationsSummary
      description: The summary data for an individual communication sent as part of an application.
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdatedBy'
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the communication
          example: '7dcf22b7-cf2f-47e6-b548-0afab1a359fd'
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        templateType:
          $ref: '#/components/schemas/TemplateType'
      required:
        - id
        - channel
        - templateType
    UpdatedBy:
      title: UpdatedBy
      description: Object containing the updated by details of a resource.
      type: object
      properties:
        requestor:
          description: The User ID of the user that updated the resource.
          format: email
          type: string
          example: fred@some-ero.gov.uk
        timestamp:
          description: "The timestamp in ISO-8601 UTC when an update on the resource occurred."
          type: string
          format: date-time
          example: '2022-09-28T18:01:42.105Z'
      required:
        - requestor
        - timestamp
    ApplicationRejectionReason:
      title: ApplicationRejectionReason
      description: Enum of reasons why an application was rejected
      type: string
      enum:
        - not-registered-to-vote
        - incomplete-application
        - photo-is-not-acceptable
        - no-response-from-applicant
        - inaccurate-information
        - fraudulent-application
        - duplicate-application
        - no-franchise-to-vote
        - other
    OfflineCommunicationReason:
      title: OfflineCommunicationReason
      description: The reason that an offline communication was sent
      type: string
      enum:
        - application-rejected
        - photo-rejected
        - document-rejected
    OfflineCommunicationChannel:
      title: OfflineCommunicationChannel
      description: The offline communication channel that was used to notify an applicant
      type: string
      enum:
        - email
        - letter
        - telephone
    CreateOfflineCommunicationConfirmationRequest:
      title: CreateOfflineCommunicationConfirmationRequest
      description: The data to audit that an offline communication has been sent by the ERO to an applicant.
      type: object
      properties:
        gssCode:
          type: string
          description: The relevant GSS code for the local authority.
          example: 'E09000007'
        reason:
          $ref: '#/components/schemas/OfflineCommunicationReason'
        channel:
          $ref: '#/components/schemas/OfflineCommunicationChannel'
      required:
        - gssCode
        - reason
        - channel
    CommunicationConfirmationHistoryResponse:
      title: CommunicationConfirmationHistoryResponse
      description: Response containing a list of the communication confirmation history entries for an application
      type: object
      properties:
        communicationConfirmations:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationConfirmationHistoryEntry'
      required:
        - communicationConfirmations
    CommunicationConfirmationHistoryEntry:
      title: CommunicationConfirmationHistoryEntry
      description: The data confirming an offline communication has been sent by the ERO to an applicant.
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdatedBy'
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the communication confirmation
          example: '7dcf22b7-cf2f-47e6-b548-0afab1a359fd'
        gssCode:
          type: string
          description: The relevant GSS code for the local authority.
          example: 'E09000007'
        reason:
          $ref: '#/components/schemas/OfflineCommunicationReason'
        channel:
          $ref: '#/components/schemas/OfflineCommunicationChannel'
      required:
        - id
        - gssCode
        - reason
        - channel
    RejectedDocument:
      title: RejectedDocument
      description: The data for the specific rejected document.
      type: object
      properties:
        documentType:
          $ref: '#/components/schemas/DocumentType'
        rejectionReasons:
          type: array
          items:
            $ref: '#/components/schemas/DocumentRejectionReason'
          description: A list of reasons why the document has been rejected. A mandatory field, but can be empty.
        rejectionNotes:
          type: string
          description: The additional notes provided when the document was rejected
      required:
        - documentType
        - rejectionReasons
    DocumentType:
      title: DocumentType
      description: Enum of possible types of document
      type: string
      enum:
        - birth-certificate
        - marriage-or-civil-partnership-certificate
        - adoption-certificate
        - firearms-certificate
        - uk-cd-issued-non-photo-card-driving-licence
        - non-uk-cd-issued-driving-licence
        - police-bail-sheet
        - mortgage-statement
        - bank-or-building-society-statement-or-confirmation-letter
        - credit-card-statement
        - pension-statement
        - council-tax-statement-or-demand-letter
        - utility-bill
        - p45-or-p60-form
        - statement-of-or-entitlement-to-benefits
        - passport
        - eea-issued-id-card
        - photocard-driving-licence
        - biometric-identity-document
        - ni-electoral-identity-card
        - cd-issued-driving-licence
        - guardianship-proof
        - instrument-of-court-appointment
        - power-of-attorney-letter
        - letter-from-hmrc
        - rent-book-from-local-authority
        - educational-institution-letter
        - student-loans-company-letter
        - address-proof-of-title
        - solicitor-proof-of-purchase-letter
        - insurance-provider-letter
        - alternative-proof-of-residency
        - reference-or-payslip-issued-by-employer
        - letter-confirming-state-pension
    DocumentRejectionReason:
      title: DocumentRejectionReason
      description: Enum of reasons why a document may be rejected
      type: string
      enum:
        - document-too-old
        - unreadable-document
        - invalid-document-type
        - duplicate-document
        - invalid-document-country
        - applicant-details-not-clear
        - parent-guardian-not-clear
        - details-on-document-do-not-match
        - other
    RejectedSignature:
      title: RejectedSignature
      description: The data for the specific rejected signature.
      type: object
      properties:
        rejectionNotes:
          type: string
          description: Any notes recorded by an Electoral Registration Officer in connection with this applicant's signature check
        rejectionReasons:
          type: array
          items:
            $ref: '#/components/schemas/SignatureRejectionReason'
          description: In case of rejection, multiple reject reasons can be added by an Electoral Registration Officer. A mandatory field, but can be empty.
        rejectionFreeText:
          type: string
          description: Free text message to provided further information regarding the signature rejection
          example: Please provide a valid signature within 28 days
      required:
        - rejectionReasons
    RejectedSignaturePersonalisation:
      title: RejectedSignaturePersonalisation
      type: object
      description: Personalisation details for a rejected signature
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
        - $ref: '#/components/schemas/RejectedSignature'
    SignatureResubmissionPersonalisation:
      title: RejectedSignaturePersonalisation
      type: object
      description: Personalisation details for a rejected signature
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
        - $ref: '#/components/schemas/RejectedSignature'
      properties:
        deadlineDate:
          type: string
          format: date
        deadlineTime:
          type: string
        uploadSignatureLink:
          type: string
          description: The URL link to upload a new signature
          example: 'http://localhost:8080/eros/city-council/applications/507f1f77bcf86cd799439011/signatures/398c1be2-7950-48a2-aca8-14cb9276a673'
      required:
        - uploadSignatureLink
    SignatureRejectionReason:
      title: SignatureRejectionReason
      description: Enum of reasons why a signature is rejected
      type: string
      enum:
        - partially-cut-off
        - too-dark
        - not-in-focus
        - has-shadows
        - wrong-size
        - other
    RequestedSignature:
      title: RequestedSignature
      description: The data for the specific requested signature.
      type: object
      properties:
        freeText:
          type: string
          description: Free text message to provided further information regarding the signature request
          example: Please provide a valid signature within 28 days
    RequestedSignaturePersonalisation:
      title: RequestedSignaturePersonalisation
      type: object
      description: Personalisation details for a requested signature
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
        - $ref: '#/components/schemas/RequestedSignature'
    NinoNotMatchedPersonalisation:
      title: NinoNotMatchedPersonalisation
      type: object
      description: Personalisation details for a nino not matched
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        additionalNotes:
          type: string
          description: Any notes recorded by an Electoral Registration Officer in connection with this applicant's nino check
    BespokeCommPersonalisation:
      title: BespokeCommPersonalisation
      type: object
      description: Personalisation details for a bespoke comm
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        subjectHeader:
          type: string
        details:
          type: string
        whatToDo:
          type: string
        deadlineDate:
          type: string
          format: date
        deadlineTime:
          type: string
      required:
        - subjectHeader
        - details
    NotRegisteredToVotePersonalisation:
      title: NotRegisteredToVotePersonalisation
      type: object
      description: Personalisation details for a not registered to vote communication
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        freeText:
          type: string
        property:
          type: string
        street:
          type: string
        town:
          type: string
        area:
          type: string
        locality:
          type: string
        postcode:
          type: string
        deadlineDate:
          type: string
          format: date
        deadlineTime:
          type: string
    GenerateRejectedSignatureTemplatePreviewRequest:
      title: GenerateRejectedSignatureTemplatePreviewRequest
      description: An object containing request attributes required for generating the rejected signature template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/RejectedSignaturePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateRequestedSignatureTemplatePreviewRequest:
      title: GenerateRequestedSignatureTemplatePreviewRequest
      description: An object containing request attributes required for generating the requested signature template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/RequestedSignaturePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateNinoNotMatchedTemplatePreviewRequest:
      title: GenerateNinoNotMatchedTemplatePreviewRequest
      description: An object containing request attributes required for generating the nino not matched template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/NinoNotMatchedPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
        hasRestrictedDocumentsList:
          type: boolean
          description: Whether the applicant this message is addressed to has a restricted documents list or not
      required:
        - channel
        - personalisation
        - sourceType
        - hasRestrictedDocumentsList
    GenerateBespokeCommTemplatePreviewRequest:
      title: GenerateBespokeCommTemplatePreviewRequest
      description: An object containing request attributes required for generating the bespoke comm template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/BespokeCommPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateNotRegisteredToVoteTemplatePreviewRequest:
      title: GenerateNotRegisteredToVoteTemplatePreviewRequest
      description: An object containing request attributes required for generating the not registered to vote template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/NotRegisteredToVotePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    GenerateSignatureResubmissionTemplatePreviewRequest:
      title: GenerateSignatureResubmissionTemplatePreviewRequest
      description: An object containing request attributes required for generating the signature resubmission template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/SignatureResubmissionPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
        - sourceType
    CommunicationsStatisticsResponseVAC:
      title: CommunicationsStatisticsResponseVAC
      description: response containing anonymised statistics about communications related to an application
      type: object
      properties:
        photoRequested:
          type: boolean
        identityDocumentsRequested:
          type: boolean
        bespokeCommunicationsSent:
          type: integer
        hasSentNotRegisteredToVoteCommunication:
          type: boolean
        numIdentityDocumentRequestCommsSent:
          type: integer
      required:
        - photoRequested
        - identityDocumentsRequested
        - bespokeCommunicationsSent
        - hasSentNotRegisteredToVoteCommunication
        - numIdentityDocumentRequestCommsSent
    CommunicationsStatisticsResponseOAVA:
      title: CommunicationsStatisticsResponseOAVA
      description: response containing anonymised statistics about communications related to an application
      type: object
      properties:
        signatureRequested:
          type: boolean
        identityDocumentsRequested:
          type: boolean
        bespokeCommunicationsSent:
          type: integer
        hasSentNotRegisteredToVoteCommunication:
          type: boolean
        numSignatureRequestCommsSent:
          type: integer
        numIdentityDocumentRequestCommsSent:
          type: integer
      required:
        - signatureRequested
        - identityDocumentsRequested
        - bespokeCommunicationsSent
        - hasSentNotRegisteredToVoteCommunication
        - numSignatureRequestCommsSent
        - numIdentityDocumentRequestCommsSent
    CommunicationsStatisticsResponse:
      title: CommunicationsStatisticsResponse
      description: response containing anonymised statistics about communications related to an application
      type: object
      properties:
        numPhotoRequestCommsSent:
          type: integer
        numBespokeCommunicationsSent:
          type: integer
        numNotRegisteredToVoteCommsSent:
          type: integer
        numSignatureRequestCommsSent:
          type: integer
        numIdentityDocumentRequestCommsSent:
          type: integer
      required:
        - numPhotoRequestCommsSent
        - numBespokeCommunicationsSent
        - numNotRegisteredToVoteCommsSent
        - numSignatureRequestCommsSent
        - numIdentityDocumentRequestCommsSent


  #
  # Response Body Definitions
  # --------------------------------------------------------------------------------
  responses:
    400ErrorResponse:
      description: Error response for a HTTP 400 describing fields in the request payload that are in error
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2022-09-28T18:01:42.105Z'
            status: 400
            error: 'Bad Request'
            message: 'Validation failed for object=applicationRequest. Error count: 14'
            validationErrors: 'Error on field applicant.nino: rejected value [aaaaaaaaaaa], must match ^.{1,10}$'
    404ErrorResponse:
      description: |
        Error response for a HTTP 404 describing the problem with the request.
        Typical examples are resources such as the application not found.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2022-09-28T18:01:42.105Z'
            status: 404
            error: 'Not Found'
            message: 'Certificate photo for voter card application with eroId=[some-ero] and applicationType=[VOTER_CARD] and applicationId=[507f1f77bcf86cd799439011] not found'
    409ErrorResponse:
      description: |
        Error response for a HTTP 409 describing the problem with the request.
        Typical examples are that an application's status(es) are not in the required state to perform the requested operation.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2022-09-28T18:01:42.105Z'
            status: 409
            error: 'Conflict'
            message: 'An application with eroId = some-ero and applicationType = VOTER_CARD and applicationId = 507f1f77bcf86cd799439011 has an unexpected photoCheckStatus = ACCEPTED'
    GenerateTemplatePreview:
      description: Response containing the result of template previews in text and html format
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateTemplatePreviewResponse'
    CommunicationsHistory:
      description: Response containing the communications history for an application
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommunicationsHistoryResponse'
    SentCommunication:
      description: Response containing the subject and body of a sent communication
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SentCommunicationResponse'
    CommunicationConfirmationHistory:
      description: Response containing the offline communication confirmation history for an application
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommunicationConfirmationHistoryResponse'
    CommunicationsStatisticsVAC:
      description: Response containing statistics about communications for an application
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommunicationsStatisticsResponseVAC'
    CommunicationsStatisticsOAVA:
      description: Response containing statistics about communications for an application
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommunicationsStatisticsResponseOAVA'
    CommunicationsStatistics:
      description: Response containing statistics about communications for an application
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommunicationsStatisticsResponse'


  #
  # Request Body Definitions
  # --------------------------------------------------------------------------------
  requestBodies:
    GeneratePhotoResubmissionTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneratePhotoResubmissionTemplatePreviewRequest'
    GenerateIdDocumentResubmissionTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateIdDocumentResubmissionTemplatePreviewRequest'
    GenerateIdDocumentRequiredTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateIdDocumentRequiredTemplatePreviewRequest'
    GenerateApplicationRejectedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateApplicationRejectedTemplatePreviewRequest'
    GenerateApplicationReceivedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateApplicationReceivedTemplatePreviewRequest'
    GenerateApplicationApprovedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateApplicationApprovedTemplatePreviewRequest'
    GenerateRejectedDocumentTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateRejectedDocumentTemplatePreviewRequest'
    GenerateTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateTemplatePreviewRequest'
    CreateOfflineCommunicationConfirmation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateOfflineCommunicationConfirmationRequest'
    GenerateRejectedSignatureTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateRejectedSignatureTemplatePreviewRequest'
    GenerateRequestedSignatureTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateRequestedSignatureTemplatePreviewRequest'
    GenerateNinoNotMatchedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateNinoNotMatchedTemplatePreviewRequest'
    GenerateRejectedOverseasDocumentTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateRejectedOverseasDocumentTemplatePreviewRequest'
    GenerateRequiredOverseasDocumentTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateRequiredOverseasDocumentTemplatePreviewRequest'
    GenerateBespokeCommTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateBespokeCommTemplatePreviewRequest'
    GenerateNotRegisteredToVoteTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateNotRegisteredToVoteTemplatePreviewRequest'
    GenerateSignatureResubmissionTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateSignatureResubmissionTemplatePreviewRequest'

  securitySchemes:
    eroUserCognitoUserPoolAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - '${cognito_ero_user_pool_arn}'
        type: cognito_user_pools
    awsIamAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
